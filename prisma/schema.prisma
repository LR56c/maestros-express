
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Notification {
  id        String    @id @default(uuid()) @db.Uuid
  data      Json
  isEnabled Boolean   @map("is_enabled")
  viewedAt  DateTime? @map("viewed_at")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  userId    String    @unique @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notification")
}

model NotificationConfig {
  id               String           @id @default(uuid()) @db.Uuid
  data             Json
  deviceToken      String           @unique @map("device_token")
  notificationType NotificationType @map("notification_type")
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  userId           String           @unique @map("user_id")
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceToken])
  @@map("notification_config")
}

model NationalIdentity {
  id         String   @id
  type       String   @map("type")
  identifier String   @map("identifier")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  countryId  String   @map("country_id") @db.Uuid
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Worker     Worker[]

  @@map("national_identity")
}

model Speciality {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @unique
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  WorkerSpeciality WorkerSpeciality[]

  @@map("speciality")
}

model Story {
  id            String          @id @default(uuid()) @db.Uuid
  name          String          @map("name")
  description   String          @map("description")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?       @map("updated_at") @db.Timestamptz(6)
  workerId      String          @unique @map("worker_id")
  worker        Worker          @relation(fields: [workerId], references: [id], onDelete: Cascade)
  StoryDocument StoryDocument[]

  @@index([workerId])
  @@map("story")
}

model StoryDocument {
  id        String              @id @default(uuid()) @db.Uuid
  type      PackageDocumentType @map("type")
  url       String              @map("url")
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  storyId   String              @map("story_id") @db.Uuid
  story     Story               @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@index([storyId])
  @@map("story_document")
}

model Package {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @map("name")
  description     String?           @map("description")
  specification   String            @map("specification")
  total           Float             @map("total")
  valueFormat     String            @map("value_format")
  coverUrl        String            @map("cover_url")
  reviewCount     Int               @default(0) @map("review_count")
  reviewAverage   Float             @default(0) @map("review_average")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId        String            @unique
  Worker          Worker            @relation(fields: [workerId], references: [id], onDelete: Cascade)
  PackageDocument PackageDocument[]

  @@map("package")
}

model PackageDocument {
  id        String              @id @default(uuid()) @db.Uuid
  type      PackageDocumentType @map("type")
  url       String              @map("url")
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  packageId String              @map("package_id") @db.Uuid
  package   Package             @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@map("package_document")
}

model Quotation {
  id              String            @id @default(uuid()) @db.Uuid
  title           String            @map("title")
  total           Float             @map("total")
  estimatedTime   DateTime?         @map("estimated_time") @db.Timestamptz(6)
  status          QuotationStatus   @map("status")
  valueFormat     String            @map("value_format")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId        String            @unique @map("worker_id")
  clientId        String            @unique @map("client_id")
  chatId          String            @map("chat_id") @db.Uuid
  chat            Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  client          User              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  worker          Worker            @relation(fields: [workerId], references: [id], onDelete: Cascade)
  QuotationDetail QuotationDetail[]

  @@map("quotation")
}

model QuotationDetail {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @map("name")
  description String?   @map("description")
  value       Float     @map("value")
  valueFormat String    @map("value_format")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  quotationId String    @map("quotation_id") @db.Uuid
  quotation   Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)

  @@map("quotation_detail")
}

model Review {
  id          String     @id @default(uuid()) @db.Uuid
  serviceId   String     @unique @map("service_id")
  serviceType ReviewType @map("service_type")
  description String     @map("description")
  value       Int        @map("value")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  userId      String     @unique @map("user_id")
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([serviceId])
  @@map("review")
}

model WorkerSpeciality {
  id           String     @id @default(uuid()) @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  specialityId String     @map("speciality_id") @db.Uuid
  speciality   Speciality @relation(fields: [specialityId], references: [id], onDelete: Cascade)
  workerId     String     @unique @map("worker_id")
  worker       Worker     @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@index([workerId])
  @@index([specialityId])
  @@map("worker_speciality")
}

model Certificate {
  id        String          @id @default(uuid()) @db.Uuid
  type      CertificateType @map("type")
  url       String          @map("url")
  name      String          @map("name")
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId  String          @unique @map("worker_id")
  worker    Worker          @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("certificate")
}

model WorkerBooking {
  id        String              @id @default(uuid()) @db.Uuid
  status    WorkerBookingStatus @map("status")
  date      DateTime            @map("date") @db.Timestamptz(6)
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId  String              @unique @map("worker_id")
  clientId  String              @unique @map("client_id")
  client    User                @relation(fields: [clientId], references: [id], onDelete: Cascade)
  worker    Worker              @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@index([workerId])
  @@map("worker_booking")
}

model WorkerSchedule {
  id                 String               @id @default(uuid()) @db.Uuid
  weekDay            Int                  @map("week_day")
  status             WorkerScheduleStatus @map("status")
  startTime          DateTime             @map("start_time") @db.Timestamptz(6)
  endTime            DateTime             @map("end_time") @db.Timestamptz(6)
  recurrentStartTime DateTime?            @map("recurrent_start_time") @db.Timestamptz(6)
  recurrentEndTime   DateTime?            @map("recurrent_end_time") @db.Timestamptz(6)
  createdAt          DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId           String               @unique @map("worker_id")
  worker             Worker               @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@index([workerId])
  @@map("worker_schedule")
}

model WorkerTax {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @map("name")
  valueFormat String   @map("value_format")
  value       Float    @map("value")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId    String   @unique @map("worker_id")
  worker      Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@index([workerId])
  @@map("worker_tax")
}

model Worker {
  id                 String             @id
  birthDate          DateTime           @map("birth_date") @db.Timestamptz(6)
  description        String?            @map("description")
  reviewCount        Int                @default(0) @map("review_count")
  reviewAverage      Float              @default(0) @map("review_average")
  location           String             @map("location")
  status             WorkerStatus       @map("status")
  nationalIdentityId String             @map("national_identity")
  user               User               @relation(fields: [id], references: [id], onDelete: Cascade)
  nationalIdentity   NationalIdentity   @relation(fields: [nationalIdentityId], references: [id], onDelete: Cascade)
  Certificate        Certificate[]
  Package            Package[]
  Quotation          Quotation[]
  Story              Story[]
  WorkerBooking      WorkerBooking[]
  WorkerEmbedding    WorkerEmbedding[]
  WorkerSchedule     WorkerSchedule[]
  WorkerSpeciality   WorkerSpeciality[]
  WorkerTax          WorkerTax[]
  Zone               Zone[]
  createdAt          DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  verifiedAt         DateTime?          @map("verified_at") @db.Timestamptz(6)
}

model Report {
  id         String   @id @default(uuid()) @db.Uuid
  reason     String   @map("reason")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  fromUserId String   @unique @map("from_user_id")
  toUserId   String   @unique @map("to_user_id")
  fromUser   User     @relation("FromUserReports", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User     @relation("ToUserReports", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([fromUserId])
  @@index([toUserId])
  @@map("report")
}

model WorkerEmbedding {
  id        String                          @id @default(uuid()) @db.Uuid
  type      WorkerEmbeddingType             @map("type")
  content   String
  location  Unsupported("geography(POINT)")
  embedding Unsupported("vector(1536)")
  createdAt DateTime                        @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId  String                          @unique @map("worker_id")
  worker    Worker                          @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@index([workerId])
  @@map("worker_embedding")
}

model Country {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @unique
  code             String             @unique
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  NationalIdentity NationalIdentity[]
  Region           Region[]

  @@map("country")
}

model Region {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  countryId String   @map("country_id") @db.Uuid
  country   Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Sector    Sector[]

  @@index([countryId])
  @@map("region")
}

model Sector {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  regionId  String   @map("region_id") @db.Uuid
  region    Region   @relation(fields: [regionId], references: [id], onDelete: Cascade)
  Zone      Zone[]

  @@map("sector")
}

model Zone {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  sectorId  String   @map("sector_id") @db.Uuid
  workerId  String   @unique @map("worker_id")
  sector    Sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  worker    Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@index([sectorId])
  @@map("zone")
}

model Message {
  id        String        @id @default(uuid()) @db.Uuid
  status    MessageStatus @map("status")
  type      MessageType   @map("type")
  content   String        @map("content")
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  userId    String        @unique @map("user_id")
  chatId    String        @map("chat_id") @db.Uuid
  Chat      Chat          @relation(fields: [chatId], references: [id])
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("message")
}

model Chat {
  id                String      @id @default(uuid()) @db.Uuid
  subject           String      @map("subject")
  quotationAccepted String?     @map("quotation_accepted") @db.Uuid
  acceptedDate      DateTime?   @map("accepted_date") @db.Timestamptz(6)
  workerArchived    DateTime?   @map("worker_archived") @db.Timestamptz(6)
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  workerId          String      @unique @map("worker_id")
  clientId          String      @unique @map("client_id")
  client            User        @relation("ClientChats", fields: [clientId], references: [id], onDelete: Cascade)
  worker            User        @relation("WorkerChats", fields: [workerId], references: [id], onDelete: Cascade)
  messages          Message[]
  Quotation         Quotation[]

  @@index([workerId])
  @@index([clientId])
  @@map("chat")
}

model Payment {
  id          String        @id @default(uuid()) @db.Uuid
  serviceId   String        @unique @map("service_id")
  serviceType PaymentType   @map("service_type")
  status      PaymentStatus @map("status")
  token       String        @map("token")
  total       Float         @map("amount")
  valueFormat String        @map("value_format")
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  userId      String        @unique @map("user_id")
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("payment")
}

// model UsersRoles {
//   userId String @map("user_id") @unique
//   roleId String @map("role_id") @db.Uuid
//   role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@id([userId, roleId])
//   @@map("users_roles")
// }

model Audit {
  auditId   String   @id @default(uuid()) @map("audit_id") @db.Uuid
  tableName String   @map("table_name")
  operation String   @map("operation")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  data      Json     @map("data")

  @@map("audit")
}

enum AuthMethod {
  EMAIL @map("email")
  GOOGLE @map("google")
}

enum QuotationStatus {
  PENDING @map("pending")
  ACCEPTED @map("accepted")
  CANCELED @map("canceled")
}

enum NotificationType {
  FIREBASE @map("firebase")
}

enum StoryType {
  IMAGE @map("image")
  VIDEO @map("video")
}

enum ReviewType {
  SERVICE @map("service")
  PACKAGE @map("package")
}

enum PaymentType {
  SERVICE @map("service")
  PACKAGE @map("package")
}

enum PaymentStatus {
  PENDING @map("pending")
  COMPLETED @map("completed")
}

enum MessageStatus {
  SENDING @map("sending")
  SENT @map("sent")
  READ @map("read")
  CANCELED @map("canceled")
  ACCEPTED @map("accepted")
}

enum MessageType {
  SUBJECT @map("subject")
  IMAGE @map("image")
  TEXT @map("text")
  QUOTATION @map("quotation")
}

enum WorkerStatus {
  INCOMPLETE @map("incomplete")
  PENDING @map("pending")
  VERIFIED @map("verified")
}

enum PackageDocumentType {
  IMAGE @map("image")
  VIDEO @map("video")
  FILE @map("file")
  PDF @map("pdf")
}

enum WorkerScheduleStatus {
  ACTIVE @map("active")
  INACTIVE @map("inactive")
}

enum WorkerBookingStatus {
  AVAILABLE @map("available")
  BOOKED @map("booked")
}

enum WorkerEmbeddingType {
  STORY @map("story")
  WORKER @map("worker")
}

enum CertificateType {
  PDF @map("pdf")
  IMAGE @map("image")
}

model User {
  id                 String               @id
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  role               String?
  banned             Boolean?
  banReason          String?
  banExpires         DateTime?
  sessions           Session[]
  accounts           Account[]
  Notification       Notification[]
  NotificationConfig NotificationConfig[]
  Quotation          Quotation[]
  Review             Review[]
  WorkerBooking      WorkerBooking[]
  Worker             Worker[]
  Message            Message[]
  Payment            Payment[]
  ClientChats        Chat[]               @relation("ClientChats")
  WorkerChats        Chat[]               @relation("WorkerChats")
  FromUserReport     Report[]             @relation("FromUserReports")
  ToUserReport       Report[]             @relation("ToUserReports")

  isAnonymous Boolean?

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
